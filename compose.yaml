services:
  api:
    build:
      context: ./backend
      dockerfile: ./Dockerfile.local
      args:
        - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    platform: linux/amd64
    working_dir: /app
    ports:
      - "8888:8888"
    volumes:
      - ./backend:/app
      - api-venv-volumes:/app/.venv
      - api-mypy-cache:/app/.mypy_cache
      - api-ruff-cache:/app/.ruff_cache
    environment:
      - PYTHONPATH=/app
      - MYPYPATH=/app
      # AWS Configuration
      - AWS_BEDROCK_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-dummy}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-dummy}
      - AWS_OPENSEARCH_ENDPOINT=${AWS_OPENSEARCH_ENDPOINT:-}
    command: |
      sh -c "
        poetry install --no-root && \
        poetry run alembic upgrade head && \
        poetry run uvicorn api.app:app --host 0.0.0.0 --port 8888 --reload
      "
    depends_on:
      - db
      - opensearch
      - s3-local

  jobs:
    build:
      context: ./backend
      dockerfile: ./jobs.Dockerfile.local
      args:
        - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    platform: linux/amd64
    working_dir: /app
    volumes:
      - ./backend:/app
      - api-venv-volumes:/app/.venv
    environment:
      - PYTHONPATH=/app
      - MYPYPATH=/app
    command: |
      sh -c "
        poetry install --no-root && \
        poetry run python -m scripts.hot_reload
      "
    depends_on:
      - db
      - azurite

  db:
    image: postgres:16
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=neosmartchat

  function:
    build:
      context: ./function
      dockerfile: ./Dockerfile.local
      args:
        - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    platform: linux/amd64
    working_dir: /app
    volumes:
      - ./function:/app
      - function-venv-volumes:/app/.venv
      - function-mypy-cache:/app/.mypy_cache
      - function-ruff-cache:/app/.ruff_cache
    command: |
      sh -c "
        poetry install --no-root && \
        poetry run python -m scripts.hot_reload
      "
    env_file:
      - ./function/.env
    depends_on:
      - db
      - opensearch
      - s3-local

  # OpenSearch for document search (replaces Azure Cognitive Search)
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.seed_hosts=opensearch
      - cluster.initial_master_nodes=opensearch
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"

  # OpenSearch Dashboards for management
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.1
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    depends_on:
      - opensearch

  # MinIO S3-compatible storage (replaces Azure Blob Storage)
  s3-local:
    image: minio/minio:latest
    container_name: s3-local
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3-data:/data
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server /data --console-address ":9001"

  # azurite:  # Commented out for AWS migration
  #   image: mcr.microsoft.com/azure-storage/azurite
  #   ports:
  #     - "10000:10000"
  #     - "10001:10001"
  #   volumes:
  #     - ./azurite:/data
  #   environment:
  #     - AZURITE_ACCOUNTS="devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;stbloblocal:c3RibG9ibG9jYWw=;stpubliclocal:c3RwdWJsaWNsb2NhbGtleQ==;stbatchlocal:c3RiYXRjaGxvY2Fsa2V5"

  metabase:
    image: metabase/metabase:latest
    ports:
      - 3001:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabaseappdb
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: postgres
      MB_DB_HOST: metabase-db
    healthcheck:
      test: curl --fail -I http://localhost:3001/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

  metabase-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: metabaseappdb
      POSTGRES_PASSWORD: postgres

volumes:
  api-venv-volumes:
  function-venv-volumes:
  api-mypy-cache:
  api-ruff-cache:
  function-mypy-cache:
  function-ruff-cache:
  opensearch-data:
  s3-data:
